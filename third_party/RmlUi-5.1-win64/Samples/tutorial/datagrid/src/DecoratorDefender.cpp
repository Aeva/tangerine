/*
 * Copyright (c) 2006 - 2008
 * Wandering Monster Studios Limited
 *
 * Any use of this program is governed by the terms of Wandering Monster
 * Studios Limited's Licence Agreement included with this program, a copy
 * of which can be obtained by contacting Wandering Monster Studios
 * Limited at info@wanderingmonster.co.nz.
 *
 */

#include "DecoratorDefender.h"
#include <RmlUi/Core/Element.h>
#include <RmlUi/Core/GeometryUtilities.h>
#include <RmlUi/Core/Math.h>
#include <RmlUi/Core/RenderInterface.h>
#include <RmlUi/Core/Texture.h>

DecoratorDefender::~DecoratorDefender() {}

bool DecoratorDefender::Initialise(const Rml::Texture& texture)
{
	image_index = AddTexture(texture);
	if (image_index == -1)
	{
		return false;
	}

	return true;
}

/// Called on a decorator to generate any required per-element data for a newly decorated element.
Rml::DecoratorDataHandle DecoratorDefender::GenerateElementData(Rml::Element* RMLUI_UNUSED_PARAMETER(element)) const
{
	RMLUI_UNUSED(element);

	return Rml::Decorator::INVALID_DECORATORDATAHANDLE;
}

// Called to release element data generated by this decorator.
void DecoratorDefender::ReleaseElementData(Rml::DecoratorDataHandle RMLUI_UNUSED_PARAMETER(element_data)) const
{
	RMLUI_UNUSED(element_data);
}

// Called to render the decorator on an element.
void DecoratorDefender::RenderElement(Rml::Element* element, Rml::DecoratorDataHandle RMLUI_UNUSED_PARAMETER(element_data)) const
{
	RMLUI_UNUSED(element_data);

	Rml::Vector2f position = element->GetAbsoluteOffset(Rml::Box::PADDING);
	Rml::Vector2f size = element->GetBox().GetSize(Rml::Box::PADDING);

	if (Rml::RenderInterface* render_interface = element->GetRenderInterface())
	{
		Rml::TextureHandle texture = GetTexture(image_index)->GetHandle(render_interface);

		Rml::Vertex vertices[4];
		int indices[6];
		Rml::GeometryUtilities::GenerateQuad(vertices, indices, position, size, Rml::Colourb(255));

		render_interface->RenderGeometry(vertices, 4, indices, 6, texture, Rml::Vector2f(0.f));
	}
}
